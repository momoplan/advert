// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.ruyicai.advert.domain;

import com.ruyicai.advert.domain.QqUserInfo;
import java.lang.Integer;
import java.util.List;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Table;
import org.springframework.transaction.annotation.Transactional;

privileged aspect QqUserInfo_Roo_Entity {
    
    declare @type: QqUserInfo: @Entity;
    
    declare @type: QqUserInfo: @Table(name = "qquserinfo");
    
    @PersistenceContext(unitName = "persistenceUnit")
    transient EntityManager QqUserInfo.entityManager;
    
    @Transactional("transactionManager")
    public void QqUserInfo.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional("transactionManager")
    public void QqUserInfo.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            QqUserInfo attached = QqUserInfo.findQqUserInfo(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional("transactionManager")
    public void QqUserInfo.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional("transactionManager")
    public void QqUserInfo.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional("transactionManager")
    public QqUserInfo QqUserInfo.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        QqUserInfo merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager QqUserInfo.entityManager() {
        EntityManager em = new QqUserInfo().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long QqUserInfo.countQqUserInfoes() {
        return entityManager().createQuery("SELECT COUNT(o) FROM QqUserInfo o", Long.class).getSingleResult();
    }
    
    public static List<QqUserInfo> QqUserInfo.findAllQqUserInfoes() {
        return entityManager().createQuery("SELECT o FROM QqUserInfo o", QqUserInfo.class).getResultList();
    }
    
    public static QqUserInfo QqUserInfo.findQqUserInfo(Integer id) {
        if (id == null) return null;
        return entityManager().find(QqUserInfo.class, id);
    }
    
    public static List<QqUserInfo> QqUserInfo.findQqUserInfoEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM QqUserInfo o", QqUserInfo.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
