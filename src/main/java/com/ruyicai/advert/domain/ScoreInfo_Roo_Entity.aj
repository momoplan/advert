// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.ruyicai.advert.domain;

import com.ruyicai.advert.domain.ScoreInfo;
import java.lang.Integer;
import java.util.List;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Table;
import org.springframework.transaction.annotation.Transactional;

privileged aspect ScoreInfo_Roo_Entity {
    
    declare @type: ScoreInfo: @Entity;
    
    declare @type: ScoreInfo: @Table(name = "scoreinfo");
    
    @PersistenceContext(unitName = "persistenceUnit")
    transient EntityManager ScoreInfo.entityManager;
    
    @Transactional("transactionManager")
    public void ScoreInfo.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional("transactionManager")
    public void ScoreInfo.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            ScoreInfo attached = ScoreInfo.findScoreInfo(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional("transactionManager")
    public void ScoreInfo.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional("transactionManager")
    public void ScoreInfo.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional("transactionManager")
    public ScoreInfo ScoreInfo.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        ScoreInfo merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager ScoreInfo.entityManager() {
        EntityManager em = new ScoreInfo().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long ScoreInfo.countScoreInfoes() {
        return entityManager().createQuery("SELECT COUNT(o) FROM ScoreInfo o", Long.class).getSingleResult();
    }
    
    public static List<ScoreInfo> ScoreInfo.findAllScoreInfoes() {
        return entityManager().createQuery("SELECT o FROM ScoreInfo o", ScoreInfo.class).getResultList();
    }
    
    public static ScoreInfo ScoreInfo.findScoreInfo(Integer id) {
        if (id == null) return null;
        return entityManager().find(ScoreInfo.class, id);
    }
    
    public static List<ScoreInfo> ScoreInfo.findScoreInfoEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM ScoreInfo o", ScoreInfo.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
